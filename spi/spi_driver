`define DRIV_IF vif.DRIVER.driver_cb

class spi_driver extends uvm_driver#(spi_seq_item);
  
  `uvm_component_utils(spi_driver);
  
  virtual spi_interface vif;
  
  //---------------------------------------
  //Constructor
  //---------------------------------------
  function new(string name, uvm_component parent);
    super.new(name, parent);
  endfunction
  
  //---------------------------------------
  //Build phase
  //---------------------------------------
  function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    if(!uvm_config_db#(virtual spi_interface)::get(this,"","vif",vif))
      begin
        `uvm_error("build_phase","driver virtual interface failed");
      end
  endfunction
  
  //---------------------------------------
  //Run Phase
  //---------------------------------------
  virtual task run_phase(uvm_phase phase);
    super.run_phase(phase);
    forever begin
      spi_seq_item trans;
      seq_item_port.get_next_item(trans);
      uvm_report_info("SPI_DRIVER ", $psprintf("Got Transaction %s",trans.convert2string()));
      //---------------------------------------
      //Load Master
      //---------------------------------------
      @(posedge vif.DRIVER.sclk);
      `DRIV_IF.start<=1;
      `DRIV_IF.load<=1;
      
      `DRIV_IF.data_in<=trans.data_in;
      
      //---------------------------------------
      //Shifting
      //---------------------------------------
      @(posedge vif.DRIVER.sclk);
      `DRIV_IF.load<=0;
      `DRIV_IF.read<=0;
      repeat(9) @(posedge vif.DRIVER.sclk);
      `DRIV_IF.read<=1;
      //---------------------------------------
      //Reading
      //---------------------------------------
      @(posedge vif.DRIVER.sclk);
      trans.data_out=`DRIV_IF.data_out;
      
     seq_item_port.item_done();
    end
    `DRIV_IF.start<=0;
  endtask
  
endclass
